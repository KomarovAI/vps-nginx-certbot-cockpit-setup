name: Infrastructure Deploy (Fixed)

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force redeploy even if no changes detected'
        required: false
        default: 'false'
        type: boolean

env:
  TERRAFORM_VERSION: "1.8.5"

jobs:
  terraform-deploy:
    name: Terraform Apply
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          
      - name: Validate base secrets
        env:
          REQ_1: ${{ secrets.VPS_HOST }}
          REQ_2: ${{ secrets.VPS_USER }}
          REQ_3: ${{ secrets.SSH_PRIVATE_KEY }}
          REQ_4: ${{ secrets.DOMAIN_NAME }}
          REQ_5: ${{ secrets.ADMIN_EMAIL }}
        run: |
          set -e
          echo "Checking required secrets..."
          missing=0
          for var in REQ_1 REQ_2 REQ_3 REQ_4 REQ_5; do
            if [ -z "${!var}" ]; then echo "ERROR: Required secret missing: $var"; missing=1; fi
          done
          [ "$missing" -eq 0 ] || { echo "Missing required secrets"; exit 1; }
          echo "All required base secrets are present"

      - name: Validate Marzban secrets (soft)
        env:
          M_DOMAIN: ${{ secrets.MARZBAN_DOMAIN }}
          M_ADMIN_U: ${{ secrets.MARZBAN_ADMIN_USERNAME }}
          M_ADMIN_P: ${{ secrets.MARZBAN_ADMIN_PASSWORD }}
          M_SHORTS: ${{ secrets.XRAY_REALITY_SHORT_IDS }}
          M_SNI: ${{ secrets.XRAY_REALITY_SERVER_NAMES }}
        run: |
          echo "Checking Marzban-related secrets (soft)..."
          [ -z "$M_DOMAIN" ] && echo "WARN: MARZBAN_DOMAIN not set"
          [ -z "$M_ADMIN_U" ] && echo "WARN: MARZBAN_ADMIN_USERNAME not set"
          [ -z "$M_ADMIN_P" ] && echo "WARN: MARZBAN_ADMIN_PASSWORD not set"
          [ -z "$M_SHORTS" ] && echo "WARN: XRAY_REALITY_SHORT_IDS not set"
          [ -z "$M_SNI" ] && echo "WARN: XRAY_REALITY_SERVER_NAMES not set"
          echo "Proceeding with defaults/autogeneration if any are missing"
          
      - name: Prepare terraform files directory
        run: |
          mkdir -p terraform/files
          cp install.sh terraform/files/install.sh
          cp setup-memory.sh terraform/files/setup-memory.sh || true
          cp update.sh terraform/files/update.sh || true
          chmod +x terraform/files/*.sh || true
          
      - name: Terraform Init
        working-directory: terraform
        run: terraform init
          
      - name: Terraform Format
        working-directory: terraform
        run: terraform fmt -recursive

      - name: Terraform Validate
        working-directory: terraform
        run: terraform validate
          
      - name: Terraform Plan
        working-directory: terraform
        env:
          TF_VAR_vps_host: ${{ secrets.VPS_HOST }}
          TF_VAR_vps_user: ${{ secrets.VPS_USER }}
          TF_VAR_ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}
          TF_VAR_domain_name: ${{ secrets.DOMAIN_NAME }}
          TF_VAR_admin_email: ${{ secrets.ADMIN_EMAIL }}
          TF_VAR_cockpit_password: ${{ secrets.COCKPIT_PASSWORD }}
        run: |
          terraform plan -detailed-exitcode -out=tfplan || {
            code=$?; if [ $code -eq 2 ]; then echo "plan_has_changes=true" >> $GITHUB_ENV; else exit $code; fi
          }
          
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && (env.plan_has_changes == 'true' || github.event.inputs.force_deploy == 'true')
        working-directory: terraform
        env:
          TF_VAR_vps_host: ${{ secrets.VPS_HOST }}
          TF_VAR_vps_user: ${{ secrets.VPS_USER }}
          TF_VAR_ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}
          TF_VAR_domain_name: ${{ secrets.DOMAIN_NAME }}
          TF_VAR_admin_email: ${{ secrets.ADMIN_EMAIL }}
          TF_VAR_cockpit_password: ${{ secrets.COCKPIT_PASSWORD }}
        run: terraform apply tfplan

      - name: Deploy Marzban (VLESS REALITY)
        if: success()
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USER: ${{ secrets.VPS_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          MARZBAN_DOMAIN: ${{ secrets.MARZBAN_DOMAIN }}
          MARZBAN_ADMIN_USERNAME: ${{ secrets.MARZBAN_ADMIN_USERNAME }}
          MARZBAN_ADMIN_PASSWORD: ${{ secrets.MARZBAN_ADMIN_PASSWORD }}
          XRAY_REALITY_PRIVATE_KEY: ${{ secrets.XRAY_REALITY_PRIVATE_KEY }}
          XRAY_REALITY_PUBLIC_KEY: ${{ secrets.XRAY_REALITY_PUBLIC_KEY }}
          XRAY_REALITY_SHORT_IDS: ${{ secrets.XRAY_REALITY_SHORT_IDS }}
          XRAY_REALITY_SERVER_NAMES: ${{ secrets.XRAY_REALITY_SERVER_NAMES }}
          XRAY_PORT: ${{ secrets.XRAY_PORT }}
          XRAY_GRPC_ENABLE: ${{ secrets.XRAY_GRPC_ENABLE }}
          XRAY_QUIC_ENABLE: ${{ secrets.XRAY_QUIC_ENABLE }}
        run: |
          set -euo pipefail
          echo "$SSH_PRIVATE_KEY" > /tmp/deploy_key
          chmod 600 /tmp/deploy_key

          rsync -az -e "ssh -o StrictHostKeyChecking=no -i /tmp/deploy_key" marzban/ "$VPS_USER@$VPS_HOST:/opt/marzban/"

          ssh -o StrictHostKeyChecking=no -i /tmp/deploy_key "$VPS_USER@$VPS_HOST" bash -s << 'EOF'
            set -euo pipefail
            MARZBAN_DIR="/opt/marzban"
            cd "$MARZBAN_DIR"
            [ -f .env ] || cp .env.example .env
            set_kv(){ k="$1"; v="$2"; [ -z "$v" ] && return 0; sed -i "s#^$k=.*#$k=$v#" .env || echo "$k=$v" >> .env; }
            set_kv DOMAIN_NAME "${MARZBAN_DOMAIN:-}"
            set_kv ADMIN_USERNAME "${MARZBAN_ADMIN_USERNAME:-}"
            set_kv ADMIN_PASSWORD "${MARZBAN_ADMIN_PASSWORD:-}"
            set_kv XRAY_REALITY_PRIVATE_KEY "${XRAY_REALITY_PRIVATE_KEY:-}"
            set_kv XRAY_REALITY_SHORT_IDS "${XRAY_REALITY_SHORT_IDS:-}"
            set_kv XRAY_REALITY_SERVER_NAMES "${XRAY_REALITY_SERVER_NAMES:-}"
            set_kv XRAY_PORT "${XRAY_PORT:-443}"
            set_kv XRAY_GRPC_ENABLE "${XRAY_GRPC_ENABLE:-true}"
            set_kv XRAY_QUIC_ENABLE "${XRAY_QUIC_ENABLE:-true}"
            if ! grep -q '^XRAY_REALITY_PRIVATE_KEY=' .env || [ -z "$(grep '^XRAY_REALITY_PRIVATE_KEY=' .env | cut -d= -f2)" ]; then
              echo "Generating REALITY keypair..."
              mkdir -p keys
              docker run --rm -v "$PWD/keys:/keys" teddysun/xray xray x25519 > keys/out.tmp 2>/dev/null || true
              PRIV=$(awk '/Private/{print $3}' keys/out.tmp || true)
              PUB=$(awk '/Public/{print $3}' keys/out.tmp || true)
              [ -n "$PRIV" ] && sed -i "s#^XRAY_REALITY_PRIVATE_KEY=.*#XRAY_REALITY_PRIVATE_KEY=$PRIV#" .env || true
              echo "REALITY Public Key: $PUB"
            fi
            docker compose --env-file .env up -d
            docker compose ps
            if command -v ufw >/dev/null 2>&1; then
              ufw allow 443/tcp || true
              ufw allow 443/udp || true
            fi
          EOF

          rm -f /tmp/deploy_key

      - name: Post-deploy verification
        if: success()
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USER: ${{ secrets.VPS_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
        run: |
          echo "$SSH_PRIVATE_KEY" > /tmp/deploy_key
          chmod 600 /tmp/deploy_key
          ssh -o StrictHostKeyChecking=no -i /tmp/deploy_key "$VPS_USER@$VPS_HOST" '
            echo "=== Services Status ===" && sudo systemctl is-active nginx cockpit docker || true
            echo "=== Open Ports ===" && sudo ss -tuln | grep -E ":(80|443|9090)" || true
            echo "=== Docker ===" && docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          ' || true
          rm -f /tmp/deploy_key

      - name: Upload deployment logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: deployment-logs-${{ github.run_id }}
          path: deployment-logs/
          retention-days: 14
