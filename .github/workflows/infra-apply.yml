name: Marzban VLESS Deploy (BULLETPROOF)

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force redeploy even if no changes detected'
        required: false
        default: 'true'
        type: boolean
      skip_terraform:
        description: 'Skip Terraform, deploy Marzban only'
        required: false
        default: 'true'
        type: boolean

env:
  TERRAFORM_VERSION: "1.8.5"

jobs:
  deploy:
    name: Bulletproof Marzban Deploy
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: 🔍 Validate secrets
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USER: ${{ secrets.VPS_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
        run: |
          echo "✅ Secret validation:"
          [ -n "$VPS_HOST" ] && echo "VPS_HOST: ✅" || { echo "VPS_HOST: ❌"; exit 1; }
          [ -n "$VPS_USER" ] && echo "VPS_USER: ✅" || { echo "VPS_USER: ❌"; exit 1; }
          [ -n "$SSH_PRIVATE_KEY" ] && echo "SSH_PRIVATE_KEY: ✅" || { echo "SSH_PRIVATE_KEY: ❌"; exit 1; }
          [ -n "$DOMAIN_NAME" ] && echo "DOMAIN_NAME: ✅" || { echo "DOMAIN_NAME: ❌"; exit 1; }

      - name: 🚀 Deploy Marzban VLESS REALITY (BULLETPROOF)
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USER: ${{ secrets.VPS_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
          ADMIN_USERNAME: ${{ secrets.MARZBAN_ADMIN_USERNAME || 'artur789298' }}
          ADMIN_PASSWORD: ${{ secrets.MARZBAN_ADMIN_PASSWORD || 'WARpteN789298' }}
          XRAY_REALITY_PRIVATE_KEY: ${{ secrets.XRAY_REALITY_PRIVATE_KEY }}
          XRAY_REALITY_SHORT_IDS: ${{ secrets.XRAY_REALITY_SHORT_IDS }}
          XRAY_REALITY_SERVER_NAMES: ${{ secrets.XRAY_REALITY_SERVER_NAMES }}
          XRAY_PORT: ${{ secrets.XRAY_PORT || '2083' }}
        run: |
          set -euo pipefail
          echo "🔐 Setting up SSH connection..."
          echo "$SSH_PRIVATE_KEY" > /tmp/deploy_key
          chmod 600 /tmp/deploy_key
          
          echo "📂 Syncing all files to server..."
          rsync -avz --delete -e "ssh -o StrictHostKeyChecking=no -i /tmp/deploy_key" \
            --exclude='.git' --exclude='terraform/files' \
            ./ "$VPS_USER@$VPS_HOST:/opt/deploy-temp/"
          
          echo "🔥 BULLETPROOF MARZBAN DEPLOYMENT..."
          ssh -o StrictHostKeyChecking=no -i /tmp/deploy_key "$VPS_USER@$VPS_HOST" \
            "DOMAIN_NAME='$DOMAIN_NAME'" \
            "ADMIN_USERNAME='$ADMIN_USERNAME'" \
            "ADMIN_PASSWORD='$ADMIN_PASSWORD'" \
            "XRAY_REALITY_PRIVATE_KEY='$XRAY_REALITY_PRIVATE_KEY'" \
            "XRAY_REALITY_SHORT_IDS='$XRAY_REALITY_SHORT_IDS'" \
            "XRAY_REALITY_SERVER_NAMES='$XRAY_REALITY_SERVER_NAMES'" \
            "XRAY_PORT='$XRAY_PORT'" \
            bash -s << 'DEPLOY_SCRIPT'
            set -euo pipefail
            
            echo "📍 STEP 1: Setup directories and copy files"
            mkdir -p /opt/marzban /var/lib/marzban
            cp -r /opt/deploy-temp/marzban/* /opt/marzban/ 2>/dev/null || true
            cd /opt/marzban
            
            echo "📍 STEP 2: Generate REALITY keys if missing"
            if [[ -z "${XRAY_REALITY_PRIVATE_KEY:-}" ]]; then
              echo "Generating new REALITY keypair..."
              KEYPAIR=$(docker run --rm teddysun/xray xray x25519 2>/dev/null || echo "")
              if [[ -n "$KEYPAIR" ]]; then
                XRAY_REALITY_PRIVATE_KEY=$(echo "$KEYPAIR" | awk '/Private/{print $3}')
                XRAY_REALITY_PUBLIC_KEY=$(echo "$KEYPAIR" | awk '/Public/{print $3}')
                echo "Generated private key: ${XRAY_REALITY_PRIVATE_KEY:0:10}..."
                echo "Generated public key: $XRAY_REALITY_PUBLIC_KEY"
              fi
            fi
            
            echo "📍 STEP 3: Create Xray VLESS config from template"
            SHORT_IDS="${XRAY_REALITY_SHORT_IDS:-abcdef0123456789,fedcba9876543210}"
            SERVER_NAMES="${XRAY_REALITY_SERVER_NAMES:-discord.com,www.yahoo.com,ajax.googleapis.com}"
            PORT="${XRAY_PORT:-2083}"
            
            # Convert to JSON arrays
            SHORT_IDS_JSON=$(echo "$SHORT_IDS" | sed 's/,/","/g' | sed 's/^/"/' | sed 's/$/"/')
            SERVER_NAMES_JSON=$(echo "$SERVER_NAMES" | sed 's/,/","/g' | sed 's/^/"/' | sed 's/$/"/')
            
            # Create Xray config
            cat > /var/lib/marzban/xray_config.json << XRAY_EOF
{
  "log": {
    "loglevel": "warning"
  },
  "inbounds": [
    {
      "tag": "vless-reality",
      "port": $PORT,
      "protocol": "vless",
      "settings": {
        "clients": [],
        "decryption": "none"
      },
      "streamSettings": {
        "network": "tcp",
        "security": "reality",
        "realitySettings": {
          "show": false,
          "dest": "www.cloudflare.com:443",
          "xver": 0,
          "serverNames": [$SERVER_NAMES_JSON],
          "privateKey": "$XRAY_REALITY_PRIVATE_KEY",
          "shortIds": [$SHORT_IDS_JSON]
        }
      }
    }
  ],
  "outbounds": [
    {
      "protocol": "freedom",
      "tag": "direct"
    }
  ]
}
XRAY_EOF
            
            chmod 600 /var/lib/marzban/xray_config.json
            chown -R 2000:2000 /var/lib/marzban/ 2>/dev/null || true
            
            echo "✅ Xray config created successfully"
            
            echo "📍 STEP 4: Create Marzban environment file"
            cat > .env << ENV_EOF
DOMAIN_NAME=$DOMAIN_NAME
ADMIN_USERNAME=$ADMIN_USERNAME
ADMIN_PASSWORD=$ADMIN_PASSWORD
MARZBAN_QUIC=true
MARZBAN_DB_URL=sqlite:////var/lib/marzban/marzban.db
MARZBAN_HOST=$DOMAIN_NAME
MARZBAN_PANEL_PORT=443
XRAY_REALITY_PRIVATE_KEY=$XRAY_REALITY_PRIVATE_KEY
XRAY_REALITY_SHORT_IDS=$SHORT_IDS
XRAY_REALITY_SERVER_NAMES=$SERVER_NAMES
XRAY_PORT=$PORT
XRAY_GRPC_ENABLE=true
XRAY_QUIC_ENABLE=true
XRAY_VLESS_REALITY=true
ENV_EOF
            
            # Only set XRAY_JSON if config exists and is valid
            if [[ -f "/var/lib/marzban/xray_config.json" ]] && python3 -m json.tool /var/lib/marzban/xray_config.json >/dev/null 2>&1; then
              echo "XRAY_JSON=/var/lib/marzban/xray_config.json" >> .env
              echo "✅ XRAY_JSON enabled - config is valid"
            else
              echo "⚠️  XRAY_JSON disabled - config invalid or missing"
            fi
            
            echo "📍 STEP 5: Create docker-compose.yml"
            cat > docker-compose.yml << COMPOSE_EOF
services:
  marzban:
    image: gozargah/marzban:latest
    container_name: marzban
    restart: unless-stopped
    environment:
      - MARZBAN_QUIC=\${MARZBAN_QUIC:-true}
      - MARZBAN_DB_URL=\${MARZBAN_DB_URL:-sqlite:////var/lib/marzban/marzban.db}
      - MARZBAN_HOST=\${DOMAIN_NAME}
      - MARZBAN_PANEL_PORT=\${MARZBAN_PANEL_PORT:-443}
      - XRAY_REALITY_PRIVATE_KEY=\${XRAY_REALITY_PRIVATE_KEY:-}
      - XRAY_REALITY_SHORT_IDS=\${XRAY_REALITY_SHORT_IDS:-}
      - XRAY_REALITY_SERVER_NAMES=\${XRAY_REALITY_SERVER_NAMES:-}
      - XRAY_PORT=\${XRAY_PORT:-2083}
      - XRAY_JSON=\${XRAY_JSON:-}
      - XRAY_VLESS_REALITY=\${XRAY_VLESS_REALITY:-true}
      - XRAY_GRPC_ENABLE=\${XRAY_GRPC_ENABLE:-true}
    volumes:
      - ./data:/var/lib/marzban
      - /var/lib/marzban:/var/lib/marzban
    network_mode: host
COMPOSE_EOF
            
            echo "📍 STEP 6: Deploy containers"
            docker compose down -v 2>/dev/null || true
            sleep 3
            
            echo "🚀 Starting Marzban with VLESS REALITY..."
            docker compose up -d
            
            echo "⏳ Waiting for Marzban to initialize..."
            for i in {1..60}; do
              if curl -s http://127.0.0.1:8000/dashboard/ >/dev/null 2>&1; then
                echo "✅ Marzban is responding (attempt $i)"
                break
              fi
              echo "Waiting for Marzban... ($i/60)"
              sleep 2
            done
            
            echo "📍 STEP 7: Create admin user"
            sleep 5  # Extra wait for database initialization
            
            # Multiple methods to create admin
            echo "Creating admin: $ADMIN_USERNAME"
            
            # Method 1: Direct create
            docker compose exec -T marzban marzban-cli admin create --username "$ADMIN_USERNAME" --password "$ADMIN_PASSWORD" 2>/dev/null || {
              echo "Method 1 failed, trying method 2..."
              # Method 2: With echo
              echo -e "y\ny\ny" | docker compose exec -T marzban marzban-cli admin create --username "$ADMIN_USERNAME" --password "$ADMIN_PASSWORD" 2>/dev/null || {
                echo "Method 2 failed, trying method 3..."
                # Method 3: Update if exists
                docker compose exec -T marzban marzban-cli admin update --username "$ADMIN_USERNAME" --password "$ADMIN_PASSWORD" 2>/dev/null || echo "Admin creation attempts completed"
              }
            }
            
            echo "📍 STEP 8: Configure firewall"
            if command -v ufw >/dev/null 2>&1; then
              ufw allow $PORT/tcp 2>/dev/null || true
              ufw allow $PORT/udp 2>/dev/null || true
            fi
            
            echo "📊 FINAL STATUS CHECK:"
            echo "=== Container Status ==="
            docker ps | grep marzban || echo "No container"
            
            echo "=== Port Check ==="
            ss -tlnp | grep -E "(8000|$PORT)" || echo "Ports not listening yet"
            
            echo "=== Marzban Logs ==="
            docker logs marzban --tail 20 2>/dev/null || echo "No logs"
            
            echo "=== Admin List ==="
            docker compose exec -T marzban marzban-cli admin list 2>/dev/null | head -10 || echo "Cannot get admin list"
            
            echo "=== Environment Variables ==="
            docker exec marzban env | grep XRAY 2>/dev/null || echo "No XRAY vars"
            
            echo "=== Configuration Files ==="
            echo "Xray config exists:" && ls -la /var/lib/marzban/xray_config.json 2>/dev/null && echo "OK" || echo "Missing"
            
            echo "🎆 DEPLOYMENT COMPLETED!"
            echo "Panel URL: https://$DOMAIN_NAME/dashboard/"
            echo "Admin: $ADMIN_USERNAME / $ADMIN_PASSWORD"
            echo "VLESS Port: $PORT"
          DEPLOY_SCRIPT
          
          rm -f /tmp/deploy_key
          
          echo "🌐 Final connectivity test..."
          echo "$SSH_PRIVATE_KEY" > /tmp/test_key
          chmod 600 /tmp/test_key
          
          RESPONSE=$(ssh -o StrictHostKeyChecking=no -i /tmp/test_key "$VPS_USER@$VPS_HOST" \
            "curl -s -o /dev/null -w '%{http_code}' http://127.0.0.1:8000/dashboard/ 2>/dev/null || echo '000'")
          
          rm -f /tmp/test_key
          
          echo "🎯 Final Result: HTTP $RESPONSE"
          case "$RESPONSE" in
            200|302) echo "✅ SUCCESS: Marzban panel is accessible!";;
            *) echo "⚠️  Status: $RESPONSE - Check logs above for details";;
          esac
          
          echo "📝 Next steps:"
          echo "1. Access panel: https://$DOMAIN_NAME/dashboard/"
          echo "2. Login: $ADMIN_USERNAME / $ADMIN_PASSWORD"
          echo "3. VLESS protocol should be available in user creation"
          echo "4. Port $XRAY_PORT should be listening"