name: Infrastructure Deploy (Fixed)

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force redeploy even if no changes detected'
        required: false
        default: 'false'
        type: boolean

env:
  TERRAFORM_VERSION: "1.8.5"

jobs:
  terraform-deploy:
    name: Terraform Apply
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          
      - name: Validate environment variables
        run: |
          echo "Checking required secrets..."
          if [[ -z "${{ secrets.VPS_HOST }}" ]]; then echo "ERROR: VPS_HOST secret not set"; exit 1; fi
          if [[ -z "${{ secrets.VPS_USER }}" ]]; then echo "ERROR: VPS_USER secret not set"; exit 1; fi
          if [[ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]]; then echo "ERROR: SSH_PRIVATE_KEY secret not set"; exit 1; fi
          if [[ -z "${{ secrets.DOMAIN_NAME }}" ]]; then echo "ERROR: DOMAIN_NAME secret not set"; exit 1; fi
          if [[ -z "${{ secrets.ADMIN_EMAIL }}" ]]; then echo "ERROR: ADMIN_EMAIL secret not set"; exit 1; fi
          echo "All required secrets are present"
          
      - name: Prepare terraform files directory
        run: |
          mkdir -p terraform/files
          echo "Created terraform/files directory"
          ls -la terraform/
          
      - name: Copy scripts to terraform files
        run: |
          # –ö–æ–ø–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã
          if [[ -f "install.sh" ]]; then
            cp install.sh terraform/files/install.sh
            chmod +x terraform/files/install.sh
            echo "Copied install.sh"
          else
            echo "ERROR: install.sh not found in root"
            exit 1
          fi
          
          if [[ -f "setup-memory.sh" ]]; then
            cp setup-memory.sh terraform/files/setup-memory.sh  
            chmod +x terraform/files/setup-memory.sh
            echo "Copied setup-memory.sh"
          fi
          
          if [[ -f "update.sh" ]]; then
            cp update.sh terraform/files/update.sh
            chmod +x terraform/files/update.sh
            echo "Copied update.sh"
          fi
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã
          echo "Files in terraform/files:"
          ls -la terraform/files/
          
      - name: Create templates if needed (optional)
        run: |
          # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
          mkdir -p terraform/files/templates terraform/files/configs
          
          # –ö–æ–ø–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
          if [[ -d "templates" ]]; then
            cp -r templates/* terraform/files/templates/ || true
            echo "Copied templates"
          fi
          
          echo "Final terraform/files structure:"
          find terraform/files -type f | head -20
          
      - name: Terraform Init
        working-directory: terraform
        run: |
          echo "Initializing Terraform..."
          terraform init
          
      - name: Terraform Validate
        working-directory: terraform
        run: |
          echo "Validating Terraform configuration..."
          terraform fmt -check -recursive || {
            echo "Running terraform fmt to fix formatting..."
            terraform fmt -recursive
          }
          terraform validate
          
      - name: Terraform Plan
        working-directory: terraform
        env:
          TF_VAR_vps_host: ${{ secrets.VPS_HOST }}
          TF_VAR_vps_user: ${{ secrets.VPS_USER }}
          TF_VAR_ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}
          TF_VAR_domain_name: ${{ secrets.DOMAIN_NAME }}
          TF_VAR_admin_email: ${{ secrets.ADMIN_EMAIL }}
          TF_VAR_cockpit_password: ${{ secrets.COCKPIT_PASSWORD }}
        run: |
          echo "Creating Terraform plan..."
          terraform plan -detailed-exitcode -out=tfplan || {
            exit_code=$?
            if [[ $exit_code == 2 ]]; then
              echo "Changes detected, will apply"
              echo "plan_has_changes=true" >> $GITHUB_ENV
            else
              echo "Planning failed with exit code $exit_code"
              exit $exit_code
            fi
          }
          
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && (env.plan_has_changes == 'true' || github.event.inputs.force_deploy == 'true')
        working-directory: terraform
        env:
          TF_VAR_vps_host: ${{ secrets.VPS_HOST }}
          TF_VAR_vps_user: ${{ secrets.VPS_USER }}
          TF_VAR_ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}
          TF_VAR_domain_name: ${{ secrets.DOMAIN_NAME }}
          TF_VAR_admin_email: ${{ secrets.ADMIN_EMAIL }}
          TF_VAR_cockpit_password: ${{ secrets.COCKPIT_PASSWORD }}
        run: |
          echo "Applying Terraform changes..."
          terraform apply tfplan
          
      - name: Post-deploy verification
        if: success()
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USER: ${{ secrets.VPS_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
        run: |
          echo "Running post-deploy verification..."
          
          # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π SSH –∫–ª—é—á (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
          echo "$SSH_PRIVATE_KEY" > /tmp/deploy_key
          chmod 600 /tmp/deploy_key
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤
          echo "Checking services on VPS..."
          ssh -o StrictHostKeyChecking=no -i /tmp/deploy_key "$VPS_USER@$VPS_HOST" '
            echo "=== Services Status ==="
            sudo systemctl is-active nginx cockpit docker || true
            echo "=== Open Ports ==="
            sudo ss -tlnp | grep -E ":(80|443|9090)" | wc -l
            echo "=== SSL Certificate ==="
            sudo certbot certificates | grep -E "(Certificate Name|Expiry Date)" | head -4 || echo "No certificates"
            echo "=== Disk Usage ==="
            df -h / | tail -1
          ' || echo "Post-deploy check failed (non-critical)"
          
          # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ SSH –∫–ª—é—á–∞
          rm -f /tmp/deploy_key
          
          echo "Deployment verification completed"
          
      - name: Collect deployment logs on failure
        if: failure()
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USER: ${{ secrets.VPS_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "Collecting logs due to deployment failure..."
          
          mkdir -p deployment-logs
          
          # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π SSH –∫–ª—é—á
          echo "$SSH_PRIVATE_KEY" > /tmp/debug_key
          chmod 600 /tmp/debug_key
          
          # –°–æ–±–∏—Ä–∞–µ–º –ª–æ–≥–∏ —Å VPS
          ssh -o StrictHostKeyChecking=no -i /tmp/debug_key "$VPS_USER@$VPS_HOST" '
            echo "=== System Logs ==="
            sudo journalctl -u nginx -n 50 --no-pager || true
            echo "=== Installation Log ==="
            sudo tail -100 /var/log/vps-setup.log || sudo tail -100 /tmp/install.log || echo "No install log"
            echo "=== Nginx Error Log ==="
            sudo tail -50 /var/log/nginx/error.log || true
            echo "=== System Status ==="
            sudo systemctl status nginx cockpit docker --no-pager || true
          ' > deployment-logs/vps-debug.log 2>&1 || echo "Could not collect VPS logs"
          
          # Terraform —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          cd terraform && terraform show > ../deployment-logs/terraform-state.log 2>&1 || true
          
          # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ SSH –∫–ª—é—á–∞
          rm -f /tmp/debug_key
          
          echo "Logs collected in deployment-logs/"
          ls -la deployment-logs/
          
      - name: Upload deployment logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: deployment-logs-${{ github.run_id }}
          path: deployment-logs/
          retention-days: 14
          
      - name: Deployment Summary
        if: always()
        run: |
          echo "=== Deployment Summary ==="
          echo "Repository: ${{ github.repository }}"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Deployment time: $(date -u)"
          echo "Status: ${{ job.status }}"
          
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "‚úÖ Deployment completed successfully!"
            echo "üåê Website: https://${{ secrets.DOMAIN_NAME }}"
            echo "üñ•Ô∏è Cockpit: https://${{ secrets.DOMAIN_NAME }}:9090"
          else
            echo "‚ùå Deployment failed. Check logs and artifacts for details."
          fi