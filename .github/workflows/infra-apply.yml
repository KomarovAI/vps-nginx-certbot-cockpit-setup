name: Infrastructure Deploy (Idempotent Fixed)

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force redeploy even if no changes detected'
        required: false
        default: 'false'
        type: boolean
      skip_terraform:
        description: 'Skip Terraform, deploy Marzban only'
        required: false
        default: 'false'
        type: boolean

env:
  TERRAFORM_VERSION: "1.8.5"

jobs:
  terraform-deploy:
    name: Infrastructure Deploy
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Terraform
        if: github.event.inputs.skip_terraform != 'true'
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          
      - name: Validate base secrets
        env:
          REQ_1: ${{ secrets.VPS_HOST }}
          REQ_2: ${{ secrets.VPS_USER }}
          REQ_3: ${{ secrets.SSH_PRIVATE_KEY }}
          REQ_4: ${{ secrets.DOMAIN_NAME }}
          REQ_5: ${{ secrets.ADMIN_EMAIL }}
        run: |
          set -e
          echo "‚úÖ Checking required secrets..."
          missing=0
          for var in REQ_1 REQ_2 REQ_3 REQ_4 REQ_5; do
            if [ -z "${!var}" ]; then echo "‚ùå ERROR: Required secret missing: $var"; missing=1; fi
          done
          [ "$missing" -eq 0 ] || { echo "‚ùå Missing required secrets"; exit 1; }
          echo "‚úÖ All required base secrets are present"

      - name: Validate Marzban secrets (soft)
        env:
          M_DOMAIN: ${{ secrets.MARZBAN_DOMAIN }}
          M_ADMIN_U: ${{ secrets.MARZBAN_ADMIN_USERNAME }}
          M_ADMIN_P: ${{ secrets.MARZBAN_ADMIN_PASSWORD }}
          M_SHORTS: ${{ secrets.XRAY_REALITY_SHORT_IDS }}
          M_SNI: ${{ secrets.XRAY_REALITY_SERVER_NAMES }}
        run: |
          echo "üîç Checking Marzban-related secrets (soft)..."
          [ -z "$M_DOMAIN" ] && echo "‚ö†Ô∏è  WARN: MARZBAN_DOMAIN not set - using main domain"
          [ -z "$M_ADMIN_U" ] && echo "‚ö†Ô∏è  WARN: MARZBAN_ADMIN_USERNAME not set - using default"
          [ -z "$M_ADMIN_P" ] && echo "‚ö†Ô∏è  WARN: MARZBAN_ADMIN_PASSWORD not set - will generate"
          [ -z "$M_SHORTS" ] && echo "‚ö†Ô∏è  WARN: XRAY_REALITY_SHORT_IDS not set - using defaults"
          [ -z "$M_SNI" ] && echo "‚ö†Ô∏è  WARN: XRAY_REALITY_SERVER_NAMES not set - using defaults"
          echo "‚ö° Proceeding with defaults/autogeneration if any are missing"
          
      - name: Prepare terraform files directory
        if: github.event.inputs.skip_terraform != 'true'
        run: |
          mkdir -p terraform/files
          cp install.sh terraform/files/install.sh
          cp setup-memory.sh terraform/files/setup-memory.sh || true
          cp update.sh terraform/files/update.sh || true
          chmod +x terraform/files/*.sh || true
          
      - name: Terraform Init
        if: github.event.inputs.skip_terraform != 'true'
        working-directory: terraform
        run: terraform init
          
      - name: Terraform Format
        if: github.event.inputs.skip_terraform != 'true'
        working-directory: terraform
        run: terraform fmt -recursive

      - name: Terraform Validate
        if: github.event.inputs.skip_terraform != 'true'
        working-directory: terraform
        run: terraform validate
          
      - name: Terraform Plan
        if: github.event.inputs.skip_terraform != 'true'
        working-directory: terraform
        env:
          TF_VAR_vps_host: ${{ secrets.VPS_HOST }}
          TF_VAR_vps_user: ${{ secrets.VPS_USER }}
          TF_VAR_ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}
          TF_VAR_domain_name: ${{ secrets.DOMAIN_NAME }}
          TF_VAR_admin_email: ${{ secrets.ADMIN_EMAIL }}
          TF_VAR_cockpit_password: ${{ secrets.COCKPIT_PASSWORD }}
        run: |
          terraform plan -detailed-exitcode -out=tfplan || {
            code=$?; if [ $code -eq 2 ]; then echo "plan_has_changes=true" >> $GITHUB_ENV; else exit $code; fi
          }
          
      - name: Terraform Apply
        if: github.event.inputs.skip_terraform != 'true' && github.ref == 'refs/heads/main' && (env.plan_has_changes == 'true' || github.event.inputs.force_deploy == 'true')
        working-directory: terraform
        env:
          TF_VAR_vps_host: ${{ secrets.VPS_HOST }}
          TF_VAR_vps_user: ${{ secrets.VPS_USER }}
          TF_VAR_ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}
          TF_VAR_domain_name: ${{ secrets.DOMAIN_NAME }}
          TF_VAR_admin_email: ${{ secrets.ADMIN_EMAIL }}
          TF_VAR_cockpit_password: ${{ secrets.COCKPIT_PASSWORD }}
        run: |
          echo "üöÄ Applying Terraform changes..."
          terraform apply tfplan
          echo "‚úÖ Terraform apply completed"

      - name: Deploy Marzban VLESS REALITY (Idempotent FIXED)
        if: success()
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USER: ${{ secrets.VPS_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
          MARZBAN_DOMAIN: ${{ secrets.MARZBAN_DOMAIN }}
          MARZBAN_ADMIN_USERNAME: ${{ secrets.MARZBAN_ADMIN_USERNAME }}
          MARZBAN_ADMIN_PASSWORD: ${{ secrets.MARZBAN_ADMIN_PASSWORD }}
          XRAY_REALITY_PRIVATE_KEY: ${{ secrets.XRAY_REALITY_PRIVATE_KEY }}
          XRAY_REALITY_PUBLIC_KEY: ${{ secrets.XRAY_REALITY_PUBLIC_KEY }}
          XRAY_REALITY_SHORT_IDS: ${{ secrets.XRAY_REALITY_SHORT_IDS }}
          XRAY_REALITY_SERVER_NAMES: ${{ secrets.XRAY_REALITY_SERVER_NAMES }}
          XRAY_PORT: ${{ secrets.XRAY_PORT }}
          XRAY_GRPC_ENABLE: ${{ secrets.XRAY_GRPC_ENABLE }}
          XRAY_QUIC_ENABLE: ${{ secrets.XRAY_QUIC_ENABLE }}
        run: |
          set -euo pipefail
          echo "üîê Setting up SSH key..."
          echo "$SSH_PRIVATE_KEY" > /tmp/deploy_key
          chmod 600 /tmp/deploy_key

          echo "üìÇ Syncing Marzban files to server..."
          rsync -az -e "ssh -o StrictHostKeyChecking=no -i /tmp/deploy_key" marzban/ "$VPS_USER@$VPS_HOST:/opt/marzban/"

          echo "‚öôÔ∏è  Configuring and deploying Marzban..."
          # CRITICAL FIX: Pass variables via SSH environment
          ssh -o StrictHostKeyChecking=no -i /tmp/deploy_key "$VPS_USER@$VPS_HOST" \
            "DOMAIN_NAME='$DOMAIN_NAME'" \
            "MARZBAN_DOMAIN='${MARZBAN_DOMAIN:-$DOMAIN_NAME}'" \
            "MARZBAN_ADMIN_USERNAME='${MARZBAN_ADMIN_USERNAME:-admin}'" \
            "MARZBAN_ADMIN_PASSWORD='${MARZBAN_ADMIN_PASSWORD:-}'" \
            "XRAY_REALITY_PRIVATE_KEY='${XRAY_REALITY_PRIVATE_KEY:-}'" \
            "XRAY_REALITY_SHORT_IDS='${XRAY_REALITY_SHORT_IDS:-abcdef0123456789,fedcba9876543210}'" \
            "XRAY_REALITY_SERVER_NAMES='${XRAY_REALITY_SERVER_NAMES:-discord.com,www.yahoo.com}'" \
            "XRAY_PORT='${XRAY_PORT:-443}'" \
            "XRAY_GRPC_ENABLE='${XRAY_GRPC_ENABLE:-true}'" \
            "XRAY_QUIC_ENABLE='${XRAY_QUIC_ENABLE:-true}'" \
            bash -s << 'EOF'
            set -euo pipefail
            MARZBAN_DIR="/opt/marzban"
            cd "$MARZBAN_DIR"
            
            echo "üìù Configuring .env file..."
            [ -f .env ] || cp .env.example .env
            
            # Idempotent configuration function
            set_kv(){
              local k="$1" v="$2"
              [ -z "$v" ] && return 0
              if grep -q "^$k=" .env; then
                sed -i "s#^$k=.*#$k=$v#" .env
              else
                echo "$k=$v" >> .env
              fi
            }
            
            # Set configuration values (idempotent) - now variables are properly passed
            set_kv DOMAIN_NAME "${MARZBAN_DOMAIN:-$DOMAIN_NAME}"
            set_kv ADMIN_USERNAME "${MARZBAN_ADMIN_USERNAME:-admin}"
            # Generate random password if not provided
            GENERATED_PASSWORD="$(openssl rand -hex 16)"
            set_kv ADMIN_PASSWORD "${MARZBAN_ADMIN_PASSWORD:-$GENERATED_PASSWORD}"
            set_kv XRAY_REALITY_PRIVATE_KEY "${XRAY_REALITY_PRIVATE_KEY:-}"
            set_kv XRAY_REALITY_SHORT_IDS "${XRAY_REALITY_SHORT_IDS:-abcdef0123456789,fedcba9876543210}"
            set_kv XRAY_REALITY_SERVER_NAMES "${XRAY_REALITY_SERVER_NAMES:-discord.com,www.yahoo.com}"
            set_kv XRAY_PORT "${XRAY_PORT:-443}"
            set_kv XRAY_GRPC_ENABLE "${XRAY_GRPC_ENABLE:-true}"
            set_kv XRAY_QUIC_ENABLE "${XRAY_QUIC_ENABLE:-true}"
            
            # Generate REALITY keypair if missing (idempotent)
            CURRENT_KEY=$(grep '^XRAY_REALITY_PRIVATE_KEY=' .env | cut -d= -f2 || echo "")
            if [ -z "$CURRENT_KEY" ] || [ "$CURRENT_KEY" = "" ]; then
              echo "üîë Generating REALITY keypair..."
              mkdir -p keys
              KEYPAIR=$(docker run --rm teddysun/xray xray x25519 2>/dev/null || echo "")
              if [ -n "$KEYPAIR" ]; then
                PRIV=$(echo "$KEYPAIR" | awk '/Private/{print $3}')
                PUB=$(echo "$KEYPAIR" | awk '/Public/{print $3}')
                [ -n "$PRIV" ] && set_kv XRAY_REALITY_PRIVATE_KEY "$PRIV"
                echo "‚úÖ REALITY Public Key: $PUB"
                echo "$PUB" > keys/public.key
              else
                echo "‚ö†Ô∏è  Failed to generate REALITY keys, using existing or empty"
              fi
            else
              echo "‚úÖ REALITY private key already configured"
            fi
            
            echo "üê≥ Starting Marzban containers..."
            # Ensure docker-compose.yml doesn't have version (deprecated)
            sed -i '/^version:/d' docker-compose.yml || true
            
            # Deploy with docker compose
            docker compose --env-file .env up -d
            
            echo "üîç Checking container status..."
            sleep 5
            docker compose ps
            
            # Configure firewall if ufw is available
            if command -v ufw >/dev/null 2>&1; then
              echo "üî• Configuring firewall..."
              ufw allow 443/tcp || true
              ufw allow 443/udp || true
            fi
            
            echo "‚úÖ Marzban deployment completed"
            
            # Show final configuration summary
            echo "üìã Configuration Summary:"
            echo "  Domain: $(grep '^DOMAIN_NAME=' .env | cut -d= -f2 || echo 'Not set')"
            echo "  Admin: $(grep '^ADMIN_USERNAME=' .env | cut -d= -f2 || echo 'Not set')"
            echo "  Password: $([ -n '$(grep '^ADMIN_PASSWORD=' .env | cut -d= -f2)' ] && echo 'Set' || echo 'Not set')"
            echo "  REALITY Key: $([ -n '$(grep '^XRAY_REALITY_PRIVATE_KEY=' .env | cut -d= -f2)' ] && echo 'Configured' || echo 'Missing')"
          EOF

          echo "üåê Configuring Nginx reverse proxy (idempotent)..."
          scp -o StrictHostKeyChecking=no -i /tmp/deploy_key scripts/ci-setup-nginx-marzban.sh "$VPS_USER@$VPS_HOST:/root/"
          ssh -o StrictHostKeyChecking=no -i /tmp/deploy_key "$VPS_USER@$VPS_HOST" "chmod +x /root/ci-setup-nginx-marzban.sh && DOMAIN_NAME='$DOMAIN_NAME' /root/ci-setup-nginx-marzban.sh"

          echo "üßπ Cleaning up..."
          rm -f /tmp/deploy_key
          
          echo "üéâ Marzban VLESS REALITY deployment completed successfully!"

      - name: Comprehensive Post-Deploy Verification
        if: success()
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USER: ${{ secrets.VPS_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
        run: |
          echo "üîê Setting up verification SSH key..."
          echo "$SSH_PRIVATE_KEY" > /tmp/verify_key
          chmod 600 /tmp/verify_key
          
          echo "üß™ Running comprehensive verification..."
          ssh -o StrictHostKeyChecking=no -i /tmp/verify_key "$VPS_USER@$VPS_HOST" \
            "DOMAIN_NAME='$DOMAIN_NAME'" \
            bash -s << 'EOF'
            set -e
            echo "==========================================="
            echo "üìä INFRASTRUCTURE VERIFICATION REPORT"
            echo "==========================================="
            
            echo "\nüéØ Services Status:"
            for service in nginx cockpit docker; do
              status=$(systemctl is-active $service 2>/dev/null || echo "inactive")
              if [ "$status" = "active" ]; then
                echo "  ‚úÖ $service: $status"
              else
                echo "  ‚ùå $service: $status"
              fi
            done
            
            echo "\nüåê Open Ports:"
            ss -tuln | grep -E ":(80|443|8000|9090)" || echo "  ‚ö†Ô∏è  No expected ports found open"
            
            echo "\nüê≥ Docker Containers:"
            if command -v docker >/dev/null; then
              docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" 2>/dev/null || echo "  ‚ùå Docker not available"
            fi
            
            echo "\nüîç HTTP Health Checks:"
            
            # Main site check
            MAIN_CODE=$(curl -sk -o /dev/null -w '%{http_code}' "https://$DOMAIN_NAME" 2>/dev/null || echo "000")
            echo "  Main site (https://$DOMAIN_NAME): $MAIN_CODE"
            
            # Dashboard check
            DASH_CODE=$(curl -sk -o /dev/null -w '%{http_code}' "https://$DOMAIN_NAME/dashboard/" 2>/dev/null || echo "000")
            echo "  Dashboard (https://$DOMAIN_NAME/dashboard/): $DASH_CODE"
            
            # API check
            API_CODE=$(curl -sk -o /dev/null -w '%{http_code}' "https://$DOMAIN_NAME/api/" 2>/dev/null || echo "000")
            echo "  API (https://$DOMAIN_NAME/api/): $API_CODE"
            
            # Cockpit check
            COCKPIT_CODE=$(curl -sk -o /dev/null -w '%{http_code}' "https://$DOMAIN_NAME:9090" 2>/dev/null || echo "000")
            echo "  Cockpit (https://$DOMAIN_NAME:9090): $COCKPIT_CODE"
            
            echo "\nüìÅ File System Status:"
            echo "  Nginx config exists: $([ -f /etc/nginx/sites-available/$DOMAIN_NAME ] && echo 'Yes' || echo 'No')"
            echo "  Marzban directory: $([ -d /opt/marzban ] && echo 'Yes' || echo 'No')"
            echo "  SSL certificates: $([ -d /etc/letsencrypt/live/$DOMAIN_NAME ] && echo 'Yes' || echo 'No')"
            
            echo "\nüîß Marzban Specific:"
            if [ -f /opt/marzban/.env ]; then
              echo "  .env file: ‚úÖ Present"
              echo "  Admin user: $(grep '^ADMIN_USERNAME=' /opt/marzban/.env | cut -d= -f2 || echo 'Not set')"
              PRIV_KEY=$(grep '^XRAY_REALITY_PRIVATE_KEY=' /opt/marzban/.env | cut -d= -f2 || echo '')
              echo "  REALITY key: $([ -n '$PRIV_KEY' ] && echo '‚úÖ Configured' || echo '‚ùå Missing')"
            else
              echo "  .env file: ‚ùå Missing"
            fi
            
            echo "\n==========================================="
            echo "üéØ VERIFICATION COMPLETE"
            echo "==========================================="
          EOF
          
          rm -f /tmp/verify_key

      - name: Final Dashboard Accessibility Check
        if: success()
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USER: ${{ secrets.VPS_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
        run: |
          echo "üîê Final accessibility check..."
          echo "$SSH_PRIVATE_KEY" > /tmp/final_key
          chmod 600 /tmp/final_key
          
          CODE=$(ssh -o StrictHostKeyChecking=no -i /tmp/final_key "$VPS_USER@$VPS_HOST" "curl -sk -o /dev/null -w '%{http_code}' https://$DOMAIN_NAME/dashboard/" || echo "000")
          rm -f /tmp/final_key
          
          echo "üåê Dashboard HTTP response: $CODE"
          
          case "$CODE" in
            200) echo "‚úÖ SUCCESS: Dashboard fully accessible (HTTP 200)" ;;
            302) echo "‚úÖ SUCCESS: Dashboard redirecting properly (HTTP 302)" ;;
            401) echo "‚úÖ SUCCESS: Dashboard authentication required (HTTP 401)" ;;
            000) echo "‚ùå CRITICAL: Dashboard completely inaccessible" && exit 1 ;;
            *) echo "‚ö†Ô∏è  WARNING: Dashboard returned HTTP $CODE - may need investigation" ;;
          esac
          
          echo "\nüéâ DEPLOYMENT SUCCESSFUL!"
          echo "üì± Marzban Dashboard: https://$DOMAIN_NAME/dashboard/"
          echo "üñ•Ô∏è  Cockpit Panel: https://$DOMAIN_NAME:9090"